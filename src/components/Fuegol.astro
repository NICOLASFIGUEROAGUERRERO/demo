<div id="fuego-bkg" class="fixed top-0 -z-10 h-full w-full"></div>

<script>
  import * as THREE from "three";

  const $bkg = document.getElementById("fuego-bkg");

  let w = window.innerWidth;
  let h = window.innerHeight;

  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000);
  camera.position.z = 10;
  scene.add(camera);

  const render = new THREE.WebGLRenderer();
  render.setSize(w, h);
  render.setClearColor(0xffffff, 1);
  $bkg?.appendChild(render.domElement);

  const light = new THREE.DirectionalLight(0xffffff, 0.5);
  light.position.set(-1, 3, 1);
  scene.add(light);

  const fireParticles: THREE.Mesh[] = [];

  const loader = new THREE.TextureLoader();
  loader.crossOrigin = "";

  loader.load("/fuego.webp", (texture) => {
    const fireGeometry = new THREE.PlaneGeometry(300, 300);
    const fireMaterial = new THREE.MeshLambertMaterial({
      map: texture,
      transparent: true,
    });

    const NUM_OF_PARTICLES = 300;

    for (let p = 0; p < NUM_OF_PARTICLES; p++) {
      const particle = new THREE.Mesh(fireGeometry, fireMaterial);

      particle.position.set(
        Math.random() * 500 - 250,
        Math.random() * 500 - 250,
        Math.random() * 1000 - 100,
      );

      particle.rotation.z = Math.random() * 360;

      scene.add(particle);

      fireParticles.push(particle);
    }
  });

  function resize() {
    h = window.innerHeight;
    w = window.innerWidth;

    camera.aspect = w / h;
    camera.updateProjectionMatrix();

    render.setSize(w, h);
  }

  function animate() {
    requestAnimationFrame(animate);

    fireParticles.forEach((particle) => {
      particle.rotation.z += 0.002;
    });

    render.render(scene, camera);
  }

  window.addEventListener("resize", resize);
  animate();
</script>
